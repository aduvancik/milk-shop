"use client";

import { useState, useEffect } from "react";
import { storage, db, auth } from "../../firebase";
import { ref, uploadBytes, getDownloadURL, deleteObject } from "firebase/storage";
import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from "firebase/firestore";
import { signInWithEmailAndPassword, signOut, onAuthStateChanged } from "firebase/auth";

export default function Admin() {
  const [user, setUser] = useState(null);
  const [loginData, setLoginData] = useState({ email: "", password: "" });
  const [products, setProducts] = useState([]);
  const [productData, setProductData] = useState({
    image: null,
    name: "",
    description: "",
    price: "",
    unit: "—à—Ç",
  });
  const [editingProductId, setEditingProductId] = useState(null);
  const [modal, setModal] = useState({ show: false, message: "", type: "success" });

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      if (currentUser) fetchProducts();
    });
    return () => unsubscribe();
  }, []);

  // –ú–æ–¥–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  useEffect(() => {
    if (modal.show) {
      const timer = setTimeout(() => setModal({ ...modal, show: false }), 3000);
      return () => clearTimeout(timer);
    }
  }, [modal]);

  // –õ–æ–≥—ñ–Ω
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, loginData.email, loginData.password);
      setModal({ show: true, message: "–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!", type: "success" });
    } catch (err) {
      console.error(err);
      setModal({ show: true, message: "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å.", type: "error" });
    }
  };

  // –õ–æ–≥—É—Ç
  const handleLogout = async () => {
    await signOut(auth);
    setModal({ show: true, message: "–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.", type: "success" });
    setProducts([]);
  };

  // –ü–æ–ª—è –ª–æ–≥—ñ–Ω—É
  const handleLoginChange = (e) => {
    setLoginData({ ...loginData, [e.target.name]: e.target.value });
  };

  // –ü–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç—É
  const handleChange = (e) => {
    setProductData({ ...productData, [e.target.name]: e.target.value });
  };
  const handleFileChange = (e) => {
    setProductData({ ...productData, image: e.target.files[0] });
  };

  // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
  const fetchProducts = async () => {
    const querySnapshot = await getDocs(collection(db, "products"));
    const items = [];
    querySnapshot.forEach((doc) => items.push({ id: doc.id, ...doc.data() }));
    setProducts(items);
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É
  const handleDelete = async (product) => {
    if (product.image && product.image.includes("https://")) {
      try {
        const filePath = decodeURIComponent(product.image.split("/o/")[1].split("?")[0]);
        const imageRef = ref(storage, filePath);
        await deleteObject(imageRef);
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–∫–∏:", err);
      }
    }
    await deleteDoc(doc(db, "products", product.id));
    setModal({ show: true, message: "–ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.", type: "success" });
    fetchProducts();
  };

  // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É
  const handleEdit = (product) => {
    setEditingProductId(product.id);
    setProductData({
      image: product.image || null,
      name: product.name || "",
      description: product.description || "",
      price: product.price || "",
      unit: product.unit || "—à—Ç",
    });
  };

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è / –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!productData.name) {
      setModal({ show: true, message: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!", type: "error" });
      return;
    }

    try {
      let imageURL = productData.image;

      // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—Ç–∏–Ω–∫—É (File)
      if (productData.image instanceof File) {
        const fileName = productData.image.name.replace(/\s/g, "_");
        const storageRef = ref(storage, `products/${fileName}`);
        await uploadBytes(storageRef, productData.image);
        imageURL = await getDownloadURL(storageRef);
      }

      const productPayload = { ...productData, image: imageURL };

      if (editingProductId) {
        await updateDoc(doc(db, "products", editingProductId), productPayload);
        setModal({ show: true, message: "–ü—Ä–æ–¥—É–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!", type: "success" });
      } else {
        await addDoc(collection(db, "products"), productPayload);
        setModal({ show: true, message: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", type: "success" });
      }

      // –°–∫–∏–¥–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏
      setProductData({ image: null, name: "", description: "", price: "", unit: "—à—Ç" });
      setEditingProductId(null);
      fetchProducts();
    } catch (err) {
      console.error(err);
      setModal({ show: true, message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.", type: "error" });
    }
  };

  // === UI ===
  if (!user) {
    return (
      <main className="p-6 max-w-md mx-auto mt-20">
        <h1 className="text-3xl font-bold mb-6 text-center">–í—Ö—ñ–¥ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
        {modal.show && (
          <div className={`fixed top-5 left-1/2 -translate-x-1/2 px-6 py-3 rounded-lg text-white font-semibold z-50
            ${modal.type === "success" ? "bg-green-500" : "bg-red-500"}`}>
            {modal.message}
          </div>
        )}
        <form onSubmit={handleLogin} className="flex flex-col gap-4 bg-white p-6 rounded-2xl shadow-md">
          <input type="email" name="email" placeholder="Email" value={loginData.email} onChange={handleLoginChange} className="border rounded-lg p-2" />
          <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" value={loginData.password} onChange={handleLoginChange} className="border rounded-lg p-2" />
          <button type="submit" className="bg-[#466a59] text-white py-2 px-4 rounded-lg hover:bg-[#385548] transition">–£–≤—ñ–π—Ç–∏</button>
        </form>
      </main>
    );
  }

  return (
    <main className="p-6 max-w-4xl mx-auto">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</h1>
        <button onClick={handleLogout} className="bg-red-500 text-white py-1 px-4 rounded-lg hover:bg-red-600 transition">–í–∏–π—Ç–∏</button>
      </div>

      {modal.show && (
        <div className={`fixed top-5 left-1/2 -translate-x-1/2 px-6 py-3 rounded-lg text-white font-semibold z-50
            ${modal.type === "success" ? "bg-green-500" : "bg-red-500"}`}>
          {modal.message}
        </div>
      )}

      {/* –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è / —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è */}
      <section className="bg-white shadow-md rounded-2xl p-6 mb-10">
        <h2 className="text-xl font-semibold mb-4 text-[#466a59]">
          {editingProductId ? "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç" : "‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç"}
        </h2>
        <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="flex flex-col">
            <label className="font-medium mb-1">–ö–∞—Ä—Ç–∏–Ω–∫–∞</label>
            <input type="file" accept="image/*" onChange={handleFileChange} className="border rounded-lg p-2" />
            {productData.image && (
              <img
                src={productData.image instanceof File ? URL.createObjectURL(productData.image) : productData.image}
                alt="preview"
                className="mt-2 w-24 h-24 object-cover rounded-lg"
              />
            )}
          </div>

          <div className="flex flex-col">
            <label className="font-medium mb-1">–ù–∞–∑–≤–∞</label>
            <input type="text" name="name" value={productData.name} onChange={handleChange} placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É" className="border rounded-lg p-2" />
          </div>

          <div className="flex flex-col md:col-span-2">
            <label className="font-medium mb-1">–û–ø–∏—Å</label>
            <textarea name="description" value={productData.description} onChange={handleChange} placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É" className="border rounded-lg p-2" />
          </div>

          <div className="flex flex-col">
            <label className="font-medium mb-1">–¶—ñ–Ω–∞</label>
            <input type="number" name="price" value={productData.price} onChange={handleChange} placeholder="0" className="border rounded-lg p-2" />
          </div>

          <div className="flex flex-col">
            <label className="font-medium mb-1">–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É</label>
            <select name="unit" value={productData.unit} onChange={handleChange} className="border rounded-lg p-2">
              <option value="—à—Ç">—à—Ç</option>
              <option value="–∫–≥">–∫–≥</option>
              <option value="–≥">–≥</option>
              <option value="–ª">–ª</option>
              <option value="–º–ª">–º–ª</option>
            </select>
          </div>

          <button type="submit" className="bg-[#466a59] text-white py-2 px-4 rounded-lg hover:bg-[#385548] transition mt-4 md:col-span-2">
            {editingProductId ? "–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏" : "–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç"}
          </button>
        </form>
      </section>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ */}
      <section className="bg-white shadow-md rounded-2xl p-6">
        <h2 className="text-xl font-semibold mb-4 text-[#466a59]">üì¶ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤</h2>
        {products.length === 0 && <p>–ü—Ä–æ–¥—É–∫—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>}
        <ul className="space-y-4">
          {products.map((product) => (
            <li key={product.id} className="flex justify-between items-center border p-3 rounded-lg">
              <div className="flex items-center gap-4">
                <img src={product.image} alt={product.name} className="w-16 h-16 object-cover rounded-lg" />
                <div>
                  <p className="font-semibold">{product.name}</p>
                  <p>{product.description}</p>
                  <p>{product.price} {product.unit}</p>
                </div>
              </div>
              <div className="flex gap-2">
                <button onClick={() => handleEdit(product)} className="bg-yellow-400 text-white py-1 px-3 rounded-lg hover:bg-yellow-500 transition">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                <button onClick={() => handleDelete(product)} className="bg-red-500 text-white py-1 px-3 rounded-lg hover:bg-red-600 transition">–í–∏–¥–∞–ª–∏—Ç–∏</button>
              </div>
            </li>
          ))}
        </ul>
      </section>
    </main>
  );
}
